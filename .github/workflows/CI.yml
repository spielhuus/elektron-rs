name: CI

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request: {}

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']

    env:
      PYTHON: ${{ matrix.python-version }}

    steps:
    - uses: actions/checkout@v4

    - name: set up python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}


    - name: install rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true

    # - name: install python dependencies
    #   run: make install

    # - name: build
    #   run: make build-dev

    # - name: test
    #   run: |
    #     sudo apt-get install -y -qq libngspice0 libngspice0-dev libpango1.0 libpango1.0-dev libcairo2 libcairo2-dev libpoppler-glib-dev libgraphite2-dev
    #     python src/plot/css/generate.py build

    #   run: |
    #     make test
    #     coverage xml
    #     ls -alh

    - name: install go
      uses: actions/setup-go@v4
      with:
        go-version: 1.16.x

  build:
    name: build py3.${{ matrix.python-version }} on ${{ matrix.platform || matrix.os }}
    needs:
      - test
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu
        #- macos
        #- windows
        python-version:
        - '10'
        - '11'
        include:
        - os: ubuntu
          platform: linux
#        - os: windows
#          ls: dir

    runs-on: ${{ format('{0}-latest', matrix.os) }}
    steps:
    - uses: actions/checkout@v4

    - name: set up python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: set up rust
      if: matrix.os != 'ubuntu'
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true

    - name: install python dependencies
      run: |
        pip install -U setuptools build wheel twine cibuildwheel
        pip install -r requirements.txt

    - name: build sdist
      if: matrix.os == 'ubuntu'
      run: |
        sudo apt-get install -y -qq libngspice0 libngspice0-dev libpango1.0 libpango1.0-dev libcairo2 libcairo2-dev libpoppler-glib-dev libgraphite2-dev
        cd src/plotter && python src/css/generate.py build

    - name: build ${{ matrix.platform || matrix.os }} binaries
      # run: python -m build
      run: cibuildwheel --output-dir dist
      env:
        CIBW_BUILD: 'cp3${{ matrix.python-version }}-*'
        CIBW_SKIP: '*-win32'
        CIBW_PLATFORM: ${{ matrix.platform || matrix.os }}
        CIBW_TEST_REQUIRES: 'pytest'
        CIBW_TEST_COMMAND: 'pytest {project}/tests -s'
        CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
        CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
        CIBW_MANYLINUX_X86_64_IMAGE: 'manylinux_2_28'
        CIBW_MANYLINUX_I686_IMAGE: 'manylinux_2_28'
        CIBW_BEFORE_BUILD: >
          yum install openssl-devel.x86_64 &&
          pip install -U setuptools-rust &&
          rustup default nightly &&
          rustup show
        CIBW_BEFORE_BUILD_LINUX: >
          pip install -U setuptools-rust &&
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=nightly --profile=minimal -y &&
          rustup show
      
#    - name: build windows 32bit binaries
#      if: matrix.os == 'windows'
#      run: python -m build
      # run: cibuildwheel --output-dir dist
      # env:
      #   CIBW_BUILD: 'cp3${{ matrix.python-version }}-win32'
      #   CIBW_PLATFORM: windows
      #   CIBW_TEST_REQUIRES: 'pytest'
      #   CIBW_TEST_COMMAND: 'pytest {project}/tests -s'
      #   CIBW_ENVIRONMENT: 'PATH="$UserProfile\.cargo\bin;$PATH"'
      #   CIBW_BEFORE_BUILD: >
      #     pip install -U setuptools-rust &&
      #     rustup toolchain install nightly-i686-pc-windows-msvc &&
      #     rustup default nightly-i686-pc-windows-msvc &&
      #     rustup override set nightly-i686-pc-windows-msvc &&
      #     rustup show
      
      
    # # - name: list dist files
    # #   run: ${{ matrix.ls || 'ls -lh' }} dist/

    - name: twine check
      run: twine check dist/*

    - name: upload to pypi
      if: startsWith(github.ref, 'refs/tags/')
      run: twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypi_token }}

