name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [ubuntu-20.04, windows-2019, macOS-11]
        os: [ubuntu-20.04]
  build:
    name: build py3.${{ matrix.python-version }} on ${{ matrix.platform || matrix.os }}
    needs:
      - test
      - lint
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu
        - macos
        - windows
        python-version:
        - '7'
        - '8'
        - '9'
        include:
        - os: ubuntu
          platform: linux
        - os: windows
          ls: dir

    runs-on: ${{ format('{0}-latest', matrix.os) }}
    steps:
    - uses: actions/checkout@v2

    - name: set up python
      uses: actions/setup-python@v1
      with:
        python-version: '3.8'

    - name: set up rust
      if: matrix.os != 'ubuntu'
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true

    - name: install python dependencies
      run: pip install -U setuptools wheel twine cibuildwheel

    - name: build sdist
      if: matrix.os == 'ubuntu' && matrix.python-version == '8'
      run: |
        pip install -r requirements.txt
        sudo apt-get install -y -qq libngspice0-dev libpango1.0-dev libcairo2-dev          
        pip install -U setuptools-rust
        python setup.py sdist
    - name: build ${{ matrix.platform || matrix.os }} binaries
      run: cibuildwheel --output-dir dist
      env:
        CIBW_BUILD: 'cp3${{ matrix.python-version }}-*'
        CIBW_SKIP: '*-win32'
        CIBW_PLATFORM: ${{ matrix.platform || matrix.os }}
        CIBW_TEST_REQUIRES: 'pytest'
        CIBW_TEST_COMMAND: 'pytest {project}/tests -s'
        CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
        CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
        CIBW_MANYLINUX_X86_64_IMAGE: 'manylinux2014'
        CIBW_MANYLINUX_I686_IMAGE: 'manylinux2014'
        CIBW_BEFORE_BUILD: >
          pip install -U setuptools-rust &&
          rustup default nightly &&
          rustup show
        CIBW_BEFORE_BUILD_LINUX: >
          pip install -U setuptools-rust &&
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=nightly --profile=minimal -y &&
          rustup show
    - name: build windows 32bit binaries
      if: matrix.os == 'windows'
      run: cibuildwheel --output-dir dist
      env:
        CIBW_BUILD: 'cp3${{ matrix.python-version }}-win32'
        CIBW_PLATFORM: windows
        CIBW_TEST_REQUIRES: 'pytest'
        CIBW_TEST_COMMAND: 'pytest {project}/tests -s'
        CIBW_ENVIRONMENT: 'PATH="$UserProfile\.cargo\bin;$PATH"'
        CIBW_BEFORE_BUILD: >
          pip install -U setuptools-rust &&
          rustup toolchain install nightly-i686-pc-windows-msvc &&
          rustup default nightly-i686-pc-windows-msvc &&
          rustup override set nightly-i686-pc-windows-msvc &&
          rustup show
    - name: list dist files
      run: ${{ matrix.ls || 'ls -lh' }} dist/

    - name: twine check
      run: twine check dist/*


# name: Python package

# on: [push]

# jobs:
#   build:

#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         python-version: ["3.10"]

#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up Python ${{ matrix.python-version }}
#         uses: actions/setup-python@v4
#         with:
#           python-version: ${{ matrix.python-version }}
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt
#           sudo apt-get install -y -qq libngspice0-dev libpango1.0-dev libcairo2-dev          
#       - name: build
#         run: python setup.py sdist
#       - name: Deploy package        
#         uses: casperdcl/deploy-pypi@v2
#         with:
#           password: ${{ secrets.PYPI_TOKEN }}
#           pip: wheel -w dist/ --no-deps .
#           # only upload if a tag is pushed (otherwise just build & check)
#           # upload: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') }}
