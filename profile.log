FUNCTION  <SNR>13_Highlight_Matching_Pair()
    Defined: /usr/local/share/nvim/runtime/plugin/matchparen.vim:39
Called 1314 times
Total time:   0.153260
 Self time:   0.133293

count  total (s)   self (s)
                              " Remove any previous match.
 1314   0.029433   0.009466   call s:Remove_Matches()
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
 1314              0.007023   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
 1314              0.000614   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
 1314              0.005063   let c_lnum = line('.')
 1314              0.003162   let c_col = col('.')
 1314              0.001412   let before = 0
                            
 1314              0.003719   let text = getline(c_lnum)
 1314              0.020994   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
 1314              0.003130   if empty(matches)
                                let [c_before, c] = ['', '']
 1314              0.000975   else
 1314              0.005938     let [c_before, c] = matches[1:2]
 1314              0.000705   endif
 1314              0.018085   let plist = split(&matchpairs, '.\zs[:,]')
 1314              0.004198   let i = index(plist, c)
 1314              0.001483   if i < 0
                                " not found, in Insert mode try character before the cursor
 1240              0.004774     if c_col > 1 && (mode() == 'i' || mode() == 'R')
                                  let before = strlen(c_before)
                                  let c = c_before
                                  let i = index(plist, c)
 1240              0.000650     endif
 1240              0.001116     if i < 0
                                  " not found, nothing to do
 1240              0.001252       return
                                endif
   74              0.000030   endif
                            
                              " Figure out the arguments for searchpairpos().
   74              0.000083   if i % 2 == 0
   34              0.000041     let s_flags = 'nW'
   34              0.000072     let c2 = plist[i + 1]
   40              0.000017   else
   40              0.000050     let s_flags = 'nbW'
   40              0.000050     let c2 = c
   40              0.000108     let c = plist[i - 1]
   74              0.000040   endif
   74              0.000101   if c == '['
                                let c = '\['
                                let c2 = '\]'
   74              0.000027   endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
   74              0.000072   if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
   74              0.000030   endif
                            
   74              0.000464   if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
   74              0.000032   else
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial, and
                                " match "symbol" for lispBarSymbol.
   74              0.000293     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|symbol\\|comment"''))'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
   74              0.000085     try
   74              0.001288       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
   74              0.000058     endtry
   74              0.000033   endif
                            
                              " Limit the search to lines visible in the window.
   74              0.000173   let stoplinebottom = line('w$')
   74              0.000132   let stoplinetop = line('w0')
   74              0.000081   if i % 2 == 0
   34              0.000077     let stopline = stoplinebottom
   40              0.000017   else
   40              0.000085     let stopline = stoplinetop
   74              0.000030   endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
   74              0.000191   if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
   74              0.000030   else
   74              0.000290     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
   74              0.000031   endif
   74              0.000042   try
   74              0.009230     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
   74              0.000069   endtry
                            
   74              0.000082   if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
   74              0.000032   endif
                            
                              " If a match is found setup match highlighting.
   74              0.000188   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
   38              0.000092     if exists('*matchaddpos')
   38              0.000281       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
   38              0.000015     endif
   38              0.000052     let w:paren_hl_on = 1
   74              0.000030   endif

FUNCTION  Sniprun_close_term_on_leave()
    Defined: Lua:1
Called 3 times
Total time:   0.000092
 Self time:   0.000092

count  total (s)   self (s)
    3              0.000084  lua require'sniprun.display'.term_close()

FUNCTION  Sniprun_clear_vt_on_leave()
    Defined: Lua:1
Called 1 time
Total time:   0.000083
 Self time:   0.000083

count  total (s)   self (s)
    1              0.000082  lua require'sniprun.display'.clear_virtual_text()

FUNCTION  <SNR>13_Remove_Matches()
    Defined: /usr/local/share/nvim/runtime/plugin/matchparen.vim:196
Called 1314 times
Total time:   0.019967
 Self time:   0.019967

count  total (s)   self (s)
 1314              0.009929   if exists('w:paren_hl_on') && w:paren_hl_on
   38              0.000134     silent! call matchdelete(3)
   38              0.000114     let w:paren_hl_on = 0
 1314              0.001471   endif

FUNCTION  Sniprun_fw_close_wrapper()
    Defined: Lua:1
Called 658 times
Total time:   0.010214
 Self time:   0.010214

count  total (s)   self (s)
  658              0.009622  lua require'sniprun.display'.fw_close()

FUNCTION  <SNR>30_try()
    Defined: ~/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/plugin/indent_blankline.vim:7
Called 657 times
Total time:   0.130537
 Self time:   0.130537

count  total (s)   self (s)
  657              0.001299     try
  657              0.125339         execute a:cmd
                                catch /E12/
                                    return
  657              0.000749     endtry

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
 1314   0.153260   0.133293  <SNR>13_Highlight_Matching_Pair()
  657   0.130537             <SNR>30_try()
 1314   0.019967             <SNR>13_Remove_Matches()
  658   0.010214             Sniprun_fw_close_wrapper()
    3   0.000092             Sniprun_close_term_on_leave()
    1   0.000083             Sniprun_clear_vt_on_leave()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
 1314   0.153260   0.133293  <SNR>13_Highlight_Matching_Pair()
  657              0.130537  <SNR>30_try()
 1314              0.019967  <SNR>13_Remove_Matches()
  658              0.010214  Sniprun_fw_close_wrapper()
    3              0.000092  Sniprun_close_term_on_leave()
    1              0.000083  Sniprun_clear_vt_on_leave()

